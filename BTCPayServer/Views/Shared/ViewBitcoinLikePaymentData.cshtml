@using System.Globalization
@using BTCPayServer.Payments
@using BTCPayServer.Payments.Bitcoin
@model IEnumerable<BTCPayServer.Services.Invoices.PaymentEntity>

@{
    PayjoinInformation payjoinIformation = null;
    var onchainPayments = Model.Where(entity => entity.GetPaymentMethodId().PaymentType == BitcoinPaymentType.Instance).Select(payment =>
    {
        var m = new OnchainPaymentViewModel();
        var onChainPaymentData = payment.GetbitcoinPaymentData() as BitcoinLikePaymentData;
        m.bitcoin = payment.GetPaymentMethodId().bitcoinCode;
        m.DepositAddress = onChainPaymentData.GetDestination();

        int confirmationCount = onChainPaymentData.ConfirmationCount;
        var network = payment.Network as BTCPayNetwork;
        if (confirmationCount >= network.MaxTrackedConfirmation)
        {
            m.Confirmations = "At least " + (network.MaxTrackedConfirmation);
        }
        else
        {
            m.Confirmations = confirmationCount.ToString(CultureInfo.InvariantCulture);
        }
        if (onChainPaymentData?.PayjoinInformation is PayjoinInformation pj)
        {
            payjoinIformation = pj;
            m.AdditionalInformation = "Original transaction";
        }
        if (payjoinIformation is PayjoinInformation &&
            payjoinIformation.CoinjoinTransactionHash == onChainPaymentData?.Outpoint.Hash)
        {
            m.AdditionalInformation = "Payjoin transaction";
        }
        m.TransactionId = onChainPaymentData.Outpoint.Hash.ToString();
        m.ReceivedTime = payment.ReceivedTime;
        m.TransactionLink = string.Format(CultureInfo.InvariantCulture, payment.Network.BlockExplorerLink, m.TransactionId);
        m.Replaced = !payment.Accounted;
        m.bitcoinPaymentData = onChainPaymentData;
        return m;
    });
}

@if (onchainPayments.Any())
{
    <div class="row">
        <div class="col-md-12 invoice-payments">
            <h3>On-Chain payments</h3>
            <table class="table table-sm table-responsive-lg">
                <thead class="thead-inverse">
                <tr>
                    <th>bitcoin</th>
                    <th>Deposit address</th>
                    <th>Amount</th>
                    <th>Transaction Id</th>
                    <th class="text-right">Confirmations</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var payment in onchainPayments)
                {
                    <tr style="@(payment.Replaced ? "text-decoration: line-through" : "")">
                        <td>@payment.bitcoin</td>
                        <td>@payment.DepositAddress</td>
                        <td class="payment-value">@payment.bitcoinPaymentData.GetValue() @Safe.Raw(payment.AdditionalInformation is string i ? $"<br/>({i})" : string.Empty)</td>
                        <td>
                            <div class="wraptextAuto">
                                <a href="@payment.TransactionLink" target="_blank">
                                    @payment.TransactionId
                                </a>
                            </div>
                        </td>
                        <td class="text-right">@payment.Confirmations</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
}
